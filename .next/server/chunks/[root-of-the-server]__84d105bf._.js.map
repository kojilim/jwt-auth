{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/koji/Desktop/auth/src/lib/auth.ts"],"sourcesContent":["import { SignJWT, jwtVerify, type JWTPayload } from \"jose\";\n\nconst JWT_SECRET = process.env.JWT_SECRET;\n\nif (!JWT_SECRET) {\n    throw new Error(\"JWT_SECRET is not defined in environment variables\");\n}\n\n// Helper to convert the secret to Uint8Array for jose\nconst encoder = new TextEncoder();\nconst secret = encoder.encode(JWT_SECRET);\n\n/**\n * Sign a JWT with the given payload and expiration (default 15m)\n */\nexport async function signToken(\n    payload: JWTPayload,\n    expiresIn: string = \"15m\"\n): Promise<string> {\n    // Calculate expiration in seconds\n    const now = Math.floor(Date.now() / 1000);\n    let exp: number;\n    if (expiresIn.endsWith(\"m\")) {\n        exp = now + parseInt(expiresIn) * 60;\n    } else if (expiresIn.endsWith(\"h\")) {\n        exp = now + parseInt(expiresIn) * 60 * 60;\n    } else if (expiresIn.endsWith(\"d\")) {\n        exp = now + parseInt(expiresIn) * 60 * 60 * 24;\n    } else {\n        // fallback: treat as seconds\n        exp = now + parseInt(expiresIn);\n    }\n\n    return await new SignJWT(payload)\n        .setProtectedHeader({ alg: \"HS256\" })\n        .setIssuedAt(now)\n        .setExpirationTime(exp)\n        .sign(secret);\n}\n\n/**\n * Verify a JWT and return the payload if valid\n */\nexport async function verifyToken(token: string): Promise<JWTPayload> {\n    const { payload } = await jwtVerify(token, secret);\n    return payload;\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAEzC,IAAI,CAAC,YAAY;IACb,MAAM,IAAI,MAAM;AACpB;AAEA,sDAAsD;AACtD,MAAM,UAAU,IAAI;AACpB,MAAM,SAAS,QAAQ,MAAM,CAAC;AAKvB,eAAe,UAClB,OAAmB,EACnB,YAAoB,KAAK;IAEzB,kCAAkC;IAClC,MAAM,MAAM,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK;IACpC,IAAI;IACJ,IAAI,UAAU,QAAQ,CAAC,MAAM;QACzB,MAAM,MAAM,SAAS,aAAa;IACtC,OAAO,IAAI,UAAU,QAAQ,CAAC,MAAM;QAChC,MAAM,MAAM,SAAS,aAAa,KAAK;IAC3C,OAAO,IAAI,UAAU,QAAQ,CAAC,MAAM;QAChC,MAAM,MAAM,SAAS,aAAa,KAAK,KAAK;IAChD,OAAO;QACH,6BAA6B;QAC7B,MAAM,MAAM,SAAS;IACzB;IAEA,OAAO,MAAM,IAAI,uJAAA,CAAA,UAAO,CAAC,SACpB,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,WAAW,CAAC,KACZ,iBAAiB,CAAC,KAClB,IAAI,CAAC;AACd;AAKO,eAAe,YAAY,KAAa;IAC3C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO;IAC3C,OAAO;AACX","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/koji/Desktop/auth/src/lib/bcrypt.ts"],"sourcesContent":["import bcrypt from \"bcrypt\";\n\nexport async function hashPassword(password: string) {\n    return bcrypt.hash(password, 10);\n}\n\nexport async function comparePassword(\n    plainPassword: string,\n    hashedPassword: string\n) {\n    return bcrypt.compare(plainPassword, hashedPassword);\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,aAAa,QAAgB;IAC/C,OAAO,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;AACjC;AAEO,eAAe,gBAClB,aAAqB,EACrB,cAAsB;IAEtB,OAAO,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,eAAe;AACzC","debugId":null}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///Users/koji/Desktop/auth/src/db/schema.ts"],"sourcesContent":["import { mysqlTable, serial, varchar, text } from \"drizzle-orm/mysql-core\";\n\nexport const users = mysqlTable(\"users\", {\n    id: serial(\"id\").primaryKey(),\n    username: varchar(\"username\", { length: 255 }).notNull().unique(),\n    passwordHash: text(\"passwordHash\").notNull(),\n    role: varchar(\"role\", { length: 50 }).notNull().default(\"user\"),\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,QAAQ,CAAA,GAAA,0JAAA,CAAA,aAAU,AAAD,EAAE,SAAS;IACrC,IAAI,CAAA,GAAA,sKAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,UAAU,CAAA,GAAA,uKAAA,CAAA,UAAO,AAAD,EAAE,YAAY;QAAE,QAAQ;IAAI,GAAG,OAAO,GAAG,MAAM;IAC/D,cAAc,CAAA,GAAA,oKAAA,CAAA,OAAI,AAAD,EAAE,gBAAgB,OAAO;IAC1C,MAAM,CAAA,GAAA,uKAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;AAC5D","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///Users/koji/Desktop/auth/src/app/api/auth/sign-in/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { signToken } from \"@/lib/auth\";\nimport { comparePassword } from \"@/lib/bcrypt\";\nimport { drizzle } from \"drizzle-orm/mysql2\";\nimport mysql from \"mysql2/promise\";\nimport { users } from \"@/db/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function POST(req: Request) {\n    let connection;\n    try {\n        const { username, password } = await req.json();\n\n        connection = await mysql.createConnection({\n            host: process.env.DATABASE_HOST!,\n            port: Number(process.env.DATABASE_PORT!),\n            user: process.env.DATABASE_USER!,\n            password: process.env.DATABASE_PASSWORD!,\n            database: process.env.DATABASE_NAME!,\n        });\n\n        const db = drizzle(connection);\n\n        const [user] = await db\n            .select()\n            .from(users)\n            .where(eq(users.username, username))\n            .limit(1);\n\n        if (!user) {\n            return NextResponse.json(\n                { success: false, message: \"Invalid username or password\" },\n                { status: 401 }\n            );\n        }\n\n        const passwordMatch = await comparePassword(password, user.passwordHash);\n\n        if (!passwordMatch) {\n            return NextResponse.json(\n                { success: false, message: \"Invalid username or password\" },\n                { status: 401 }\n            );\n        }\n\n        const token = await signToken({ userId: user.id, role: user.role });\n\n        const cookieStore = await cookies();\n        cookieStore.set(\"auth_token\", token, {\n            httpOnly: true,\n            secure: process.env.NODE_ENV === \"production\",\n            sameSite: \"strict\",\n            path: \"/\",\n            maxAge: 60 * 15, // 15 minutes\n        });\n\n        return NextResponse.json({ success: true, message: \"Login successful\" });\n    } catch (error) {\n        console.error(\"Login error:\", error);\n        return NextResponse.json(\n            { success: false, message: \"Internal server error\" },\n            { status: 500 }\n        );\n    } finally {\n        if (connection) await connection.end();\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEO,eAAe,KAAK,GAAY;IACnC,IAAI;IACJ,IAAI;QACA,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE7C,aAAa,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;YACtC,MAAM,QAAQ,GAAG,CAAC,aAAa;YAC/B,MAAM,OAAO,QAAQ,GAAG,CAAC,aAAa;YACtC,MAAM,QAAQ,GAAG,CAAC,aAAa;YAC/B,UAAU,QAAQ,GAAG,CAAC,iBAAiB;YACvC,UAAU,QAAQ,GAAG,CAAC,aAAa;QACvC;QAEA,MAAM,KAAK,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE;QAEnB,MAAM,CAAC,KAAK,GAAG,MAAM,GAChB,MAAM,GACN,IAAI,CAAC,qHAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,qHAAA,CAAA,QAAK,CAAC,QAAQ,EAAE,WACzB,KAAK,CAAC;QAEX,IAAI,CAAC,MAAM;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,SAAS;YAA+B,GAC1D;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,gBAAgB,MAAM,CAAA,GAAA,sHAAA,CAAA,kBAAe,AAAD,EAAE,UAAU,KAAK,YAAY;QAEvE,IAAI,CAAC,eAAe;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,SAAS;YAA+B,GAC1D;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,QAAQ,MAAM,CAAA,GAAA,oHAAA,CAAA,YAAS,AAAD,EAAE;YAAE,QAAQ,KAAK,EAAE;YAAE,MAAM,KAAK,IAAI;QAAC;QAEjE,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAChC,YAAY,GAAG,CAAC,cAAc,OAAO;YACjC,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,MAAM;YACN,QAAQ,KAAK;QACjB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,SAAS;QAAmB;IAC1E,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,SAAS;QAAwB,GACnD;YAAE,QAAQ;QAAI;IAEtB,SAAU;QACN,IAAI,YAAY,MAAM,WAAW,GAAG;IACxC;AACJ","debugId":null}}]
}